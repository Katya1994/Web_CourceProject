@page "/AdminPage"
@using BlazorApp.Data
@using System.Diagnostics
@using Jitbit.Utils

@inject IWebHostEnvironment Environment;

<div class="container">
    <div class="bs-callout bs-callout-info">
        <h1>Admin page</h1>
        <p>Enter login and password of admin to show all results</p>
    </div>
    <div>
        <input type="text" class="form-control" placeholder="Login" @bind="adminName"/>
    </div>
    <div style="margin-top: 20px">
        <input type="password" class="form-control" placeholder="Password" @bind="adminPassword"/>
    </div>
    <div style="margin-top: 20px">
        <Button Color="ButtonColor.Primary" @onclick="f => ShowAllResults(adminName, adminPassword)">Submit</Button> 
    </div>
    @if (studentResults.Count > 0)
    {
        <div style="margin-top: 20px">
            <Button Color="ButtonColor.Primary" @onclick="f => ExportTable()">Export table</Button> 
        </div>
        <div style="margin-top: 20px; height: 400px; overflow: auto;">
        <table class="table table-dark table-striped">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Student</th>
                <th scope="col">Pre-check result</th>
                <th scope="col">Il-code check result</th>
            </tr>
            </thead>
            <tbody>
                @foreach (var item in studentResults)
                {
                    index++;
                    <tr>
                        <th scope="row">@index</th>
                        <td>@item.Key</td>
                        <td>@item.Value[0]</td>
                        <td>@item.Value[1]</td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    }
</div>



@code {
    string adminName;
    string adminPassword;

    string[] adminData = new string[] { "admin", "123" };

    double[] results;
    Dictionary<string, string[]> studentResults = new Dictionary<string, string[]>();

    int index;
    
    protected override void OnInitialized()
    {
    }
    
    
    private void ShowAllResults(string name, string password)
    {
        if (name == adminData[0] && password == adminData[1])
        {
            string path = Path.Combine(Environment.ContentRootPath, "results", "results.txt");
            
            if (File.Exists(path))
            {
                List<string> list = File.ReadLines(path).ToList();
            
                foreach (var line in File.ReadLines(path).ToList())
                {
                    var temp = line.Split(":");
                    studentResults.Add(temp[0], new string[]{temp[1], temp[2]});
                }
            }
        }
    }

    private void ExportTable()
    {
        try
        {
            var path = Path.Combine(Environment.ContentRootPath, "results", "exportTable.csv");
            var exportTable = new CsvExport();

            foreach (var item in studentResults)
            {
                exportTable.AddRow();
                exportTable["Student"] = item.Key;
                exportTable["Pre-check result"] = item.Value[0];
                exportTable["Il-code check result"] = item.Value[1];
            }

            exportTable.ExportToFile(path);
        }
        catch (Exception ex)
        {
            Debug.Print(ex.Message);
        }
        finally
        {
            index = 0;
        }
    }
}