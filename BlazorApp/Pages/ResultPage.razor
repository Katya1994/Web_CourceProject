@inject IWebHostEnvironment Environment;
@inject CurrentUser _CurrentUser;
@inject IChecking _Checking;

@page "/ResultPage"
@using BlazorApp.Data
@using System.Text
@using System.Diagnostics

<h3>Results:</h3>
@if (_CurrentUser.UserName != null)
{
    <label>Result for @_CurrentUser.UserName:</label>
    <label>your result of plagiary = @textCheckResult %</label>
}

@code {
    Dictionary<string, List<string>> _dictionary = new Dictionary<string, List<string>>();
    double textCheckResult = 0;
    
    protected override void OnInitialized()
    {
        if(_CurrentUser.UserName is null)
            return;
        
        Extracting.ExtractAll(Path.Combine(Environment.ContentRootPath, "uploads"));
        FillCheckingDictionary();
        
        textCheckResult = _Checking.CalculatePlagPercent(_CurrentUser.UserName, _dictionary);
        WriteResultToFile(textCheckResult);
    }

    private void WriteResultToFile(double result)
    {
        var folderPath = Path.Combine(Environment.ContentRootPath, "results");
        if(!Directory.Exists(folderPath))
            System.IO.Directory.CreateDirectory(folderPath);

        string resultsPath = Path.Combine(folderPath, "results.txt");

        if (!File.Exists(resultsPath))
            File.Create(resultsPath);

        using (FileStream fstream = new FileStream(resultsPath, FileMode.Append))
        {
            using (StreamWriter writer = new StreamWriter(fstream, Encoding.Default))
            {
                writer.WriteLine($"{_CurrentUser.UserName}:{result}");
            }
        }
    }
    
    private List<FileInfo> GetRecursFiles(DirectoryInfo rootDir)
    {
        List<FileInfo> fileList = new List<FileInfo>();
        try
        {
            var dirs = rootDir.GetDirectories();
            foreach (var dir in dirs)
            {
                fileList.AddRange(GetRecursFiles(dir));
            }
            var files = rootDir.GetFiles();
            foreach (var file in files)
            {
                if(file.Extension == ".cache" || file.Extension == ".config")
                    continue;
                
                fileList.Add(file);
            }
        }
        catch (Exception ex)
        {
            Debug.Print(ex.Message);
        }
        return fileList;
    }
    
    public List<string> GetCleanText(DirectoryInfo dir)
    {
        List<string> list = new List<string>();

        List<FileInfo> fileList = GetRecursFiles(dir);

        foreach (var file in fileList)
        {
            foreach (string line in File.ReadAllLines(file.FullName))
            {
                if (!string.IsNullOrWhiteSpace(line))
                {
                    foreach (var ch in line)
                    {
                        if (char.IsLetterOrDigit(ch))
                        {
                            list.Add(line.Trim().ToLower());
                            break;
                        }
                    }
                }
            }
        }
        
        return list;
    }

    //для текстовых файлов
    public void FillCheckingDictionary()
    {
        DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Environment.ContentRootPath, "uploads"));
        var dirs = directoryInfo.GetDirectories();
        foreach (var dir in dirs)
        {           
            var textList = GetCleanText(dir);
            _dictionary.Add(dir.Name, textList);
        }
    }
}