@inject IWebHostEnvironment Environment;
@inject CurrentUser _CurrentUser;
@inject IChecking _Checking;

@page "/ResultPage"
@using BlazorApp.Data
@using System.Text
@using ICSharpCode.SharpZipLib.Core
@using ICSharpCode.SharpZipLib.Zip
@

<h3>Results:</h3>
@if (_CurrentUser.UserName != null)
{
    <label>Result for @_CurrentUser.UserName:</label>
    <label>your result of plagiary = @result %</label>
}

@code {
    Dictionary<string, List<string>> _dictionary = new Dictionary<string, List<string>>();
    double result = 0;
    
    protected override void OnInitialized()
    {
        if(_CurrentUser.UserName is null)
            return;
        
        FillCheckingDictionary();
        
        result = _Checking.CalculateUniquenessPercent(_CurrentUser.UserName, _dictionary);
        WriteResultToFile(result);
    }

    private void WriteResultToFile(double result)
    {
        var folderPath = Path.Combine(Environment.ContentRootPath, "results");
        if(!Directory.Exists(folderPath))
            System.IO.Directory.CreateDirectory(folderPath);

        string resultsPath = Path.Combine(folderPath, "results.txt");

        if (!File.Exists(resultsPath))
            File.Create(resultsPath);

        using (FileStream fstream = new FileStream(resultsPath, FileMode.Append))
        {
            using (StreamWriter writer = new StreamWriter(fstream, Encoding.Default))
            {
                writer.WriteLine($"{_CurrentUser.UserName}:{result}");
            }
        }
    }
    
    public List<string> GetCleanText(DirectoryInfo dir)
    {
        List<string> list = new List<string>();

        var fileList = dir.GetFiles();
        var dirList = dir.GetDirectories();

        foreach (var file in dir.GetFiles())
        {
            foreach (string line in File.ReadAllLines(file.FullName))
            {
                if (!string.IsNullOrWhiteSpace(line))
                {
                    foreach (var ch in line)
                    {
                        if (char.IsLetterOrDigit(ch))
                        {
                            list.Add(line.Trim().ToLower());
                            break;
                        }
                    }
                }
            }
        }
        
        return list;
    }

    //для текстовых файлов
    /*public void FillCheckingDictionary()
    {
        DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Environment.ContentRootPath, "uploads"));
        var dirs = directoryInfo.GetDirectories();
        foreach (var dir in dirs)
        {           
            var textList = GetCleanText(dir);
            _dictionary.Add(dir.Name, textList);
        }
    }*/

    //для проектов в архиве
    public void FillCheckingDictionary()
    {
        DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Environment.ContentRootPath, "uploads"));
        var dirs = directoryInfo.GetDirectories();
        
        foreach (var dir in dirs)
        {
            //extract zip
            var tempList = dir.GetFiles();
            foreach (var file in tempList)
            {
                if (file.Extension == ".zip")
                {
                    ExtractZipContent(file.FullName, null, $"{file.DirectoryName}");
                    file.Delete();
                }
            }
            
            //build
        }
    }
    
    private void ExtractZipContent(string FileZipPath, string password, string OutputFolder)
    {
        ZipFile file = null;
        try
        {
            FileStream fs = File.OpenRead(FileZipPath);
            file = new ZipFile(fs);

            if (!String.IsNullOrEmpty(password))
            {
                file.Password = password;
            }

            foreach (ZipEntry zipEntry in file)
            {
                if (!zipEntry.IsFile)
                    {
                        // Ignore directories
                        continue;           
                    }

                String entryFileName = zipEntry.Name;
                // to remove the folder from the entry:- entryFileName = Path.GetFileName(entryFileName);
                // Optionally match entrynames against a selection list here to skip as desired.
                // The unpacked length is available in the zipEntry.Size property.

                // 4K is optimum
                byte[] buffer = new byte[4096];     
                Stream zipStream = file.GetInputStream(zipEntry);

                // Manipulate the output filename here as desired.
                String fullZipToPath = Path.Combine(OutputFolder, entryFileName);
                string directoryName = Path.GetDirectoryName(fullZipToPath);

                if (directoryName.Length > 0)
                {
                    Directory.CreateDirectory(directoryName);
                }

                // Unzip file in buffered chunks. This is just as fast as unpacking to a buffer the full size
                // of the file, but does not waste memory.
                // The "using" will close the stream even if an exception occurs.
                using (FileStream streamWriter = File.Create(fullZipToPath))
                {
                    StreamUtils.Copy(zipStream, streamWriter, buffer);
                }
            }
        }
        finally
        {
            if (file != null)
            {
                file.IsStreamOwner = true; // Makes close also shut the underlying stream
                file.Close(); // Ensure we release resources
            }
        }
    }
}