@inject IWebHostEnvironment Environment;
@inject CurrentUser _CurrentUser;
@inject IChecking _Checking;
@inject IFilePreparing _TextPreparing;
@inject ILCodePreparing _IlCodePreparing;

@page "/ResultPage"
@using BlazorApp.Data
@using System.Text
@using System.Diagnostics

<div class="container">
    <div class="bs-callout bs-callout-info">
        <h1>Results</h1>
    </div>
    <div>
        <Button Color="ButtonColor.Primary" @onclick="f => Calculate()">Calculate plagiary percent</Button>
    </div>
    <div class="alert-info" style="margin-top: 20px;"> 
        @if (isCalculated)
        {
            <div style="margin-left: 20px;">Result for @_CurrentUser.UserName:</div>
            <div style="margin-left: 20px;">text result of plagiary = @_CurrentUser.TextResult %</div>
            <div style="margin-left: 20px;">il code = @_CurrentUser.ILResult %</div>
        }
    </div>
    <div>
        <Preload Color="SpinnerColor.Primary"></Preload>
    </div>
</div>



@code {
    Dictionary<string, List<string>> _textDictionary;
    Dictionary<string, List<string>> _ilCodeDictionary;
    
    string path;
    string saveIlPath;

    bool isCalculated = false;
    
    [Inject] protected PreloadService PageLoadingService { get; set; }
    
    private async Task LoadSpinnerAsync()
    {
        try
        {
            PageLoadingService.Show();
            await Task.Delay(5000);
        }
        catch(Exception ex)
        {
            Debug.Print(ex.Message);
        }
        finally
        {
           //PageLoadingService.Hide();
        }
    }
    
    private async Task OnSpinnerChangedAsync(ChangeEventArgs args)
    {
        await LoadSpinnerAsync();
    }
    
    protected override void OnInitialized()
    {
        isCalculated = false;
        
        if(_CurrentUser.UserName is null)
            return;
        
        path = Path.Combine(Environment.ContentRootPath, "uploads");
        saveIlPath = Path.Combine(Environment.ContentRootPath, "il");
        
        if(!Directory.Exists(saveIlPath))
            Directory.CreateDirectory(saveIlPath);
    }

    private async void Calculate()
    {
        await OnSpinnerChangedAsync(new ChangeEventArgs());
        try
        {
            _TextPreparing = new TextPreparing();
            _IlCodePreparing = new ILCodePreparing();

            Extracting.ExtractAll(path);
            _textDictionary = _TextPreparing.FillCheckingDictionary(path);
            _ilCodeDictionary = _IlCodePreparing.FillCheckingDictionary(path, saveIlPath);
            _CurrentUser.TextResult = _Checking.CalculatePlagPercent(_CurrentUser.UserName, _textDictionary).ToString("0.00");
            _CurrentUser.ILResult = _Checking.CalculatePlagPercent(_CurrentUser.UserName, _ilCodeDictionary).ToString("0.00");

            WriteResultToFile(_CurrentUser.ILResult, _CurrentUser.TextResult);
        }
        catch (Exception ex)
        {
            Debug.Print(ex.Message);
        }
        finally
        {
            PageLoadingService.Hide();
            isCalculated = true;
            StateHasChanged();
        }
    }
    
    private void WriteResultToFile(string textResult, string ilResult)
    {
        try
        {
            var folderPath = Path.Combine(Environment.ContentRootPath, "results");
            if (!Directory.Exists(folderPath))
                Directory.CreateDirectory(folderPath);

            string resultsPath = Path.Combine(folderPath, "results.txt");

            if (!File.Exists(resultsPath))
            {
                var resFile = File.Create(resultsPath);
                resFile.Close();
            }

            using (FileStream fstream = new FileStream(resultsPath, FileMode.Append))
            {
                using (StreamWriter writer = new StreamWriter(fstream, Encoding.Default))
                {
                    writer.WriteLine($"{_CurrentUser.UserName}:{textResult}:{ilResult}");
                }
            }
        }
        catch (Exception ex)
        {
            Debug.Print(ex.Message);
        }
    }
}