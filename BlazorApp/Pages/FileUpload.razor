@page "/FileUpload"

@using Microsoft.Extensions.Logging
@inject ILogger<FileUpload> Logger
@inject IWebHostEnvironment Environment
@using System.IO
@using BlazorApp.Data
@using Microsoft.AspNetCore.Hosting

@inject CurrentUser _CurrentUser;

<div class="container">
    <div class="bs-callout bs-callout-info">
        <h1>Upload Files</h1>
        <p>Upload up to <code>@maxAllowedFiles</code> of up to <code>@maxFileSize</code> bytes</p>
        <p>You must enter your name</p>
        <p>Allowed <code>.zip</code> format of your project</p>
    </div>
    <div>
        <input type="text" class="form-control" placeholder="Student name" @bind="studentName"/>
    </div>
    <div>
        <div class="alert-info" style="margin-top: 20px">
            <InputFile OnChange="@LoadFiles" multiple/> 
        </div>
    </div>
    <div class="alert-info" style="margin-top: 10px">
       @if (isLoading)
           {
               <p>Uploading...</p>
           }
           else
           {
               <ul>
                   @foreach (var file in loadedFiles)
                   {
                       <li>
                           <ul>
                               <li>Name: @file.Name</li>
                               <li>Last modified: @file.LastModified.ToString()</li>
                               <li>Size (bytes): @file.Size</li>
                               <li>Content type: @file.ContentType</li>
                           </ul>
                       </li>
                   }
               </ul>
           } 
    </div>
</div>




@code {
    private List<IBrowserFile> loadedFiles = new();
    private Dictionary<string, IBrowserFile> loadedFilesDictionary = new();
    private const long maxFileSize = 1024 * 200;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string studentName;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        _CurrentUser.UserName = studentName;
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                //var type = file.ContentType;
                loadedFiles.Add(file);
                loadedFilesDictionary.Add(studentName, file);
                
                isLoading = false;
                
                var folderPath = Path.Combine(Environment.ContentRootPath, "uploads", studentName);
                if(!Directory.Exists(folderPath))
                    System.IO.Directory.CreateDirectory(folderPath);
                
                await using FileStream fs = new(Path.Combine(folderPath, file.Name), FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", 
                    file.Name, ex.Message);
            }
        }
    }
}